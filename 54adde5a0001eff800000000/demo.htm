<!DOCTYPE html>
<html>
  <head>
    <title>Bootstrap beign</title><meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

	  <!--<script src="../jQuery/jquery-3.2.1.min.js"></script>-->

	  <link href="animate.css" rel="stylesheet" >
	<style>
		body{

			touch-action: none;
		}
		/*找到了个解决方法在 你要添加移动事件的元素上面加人css 属性 touch-action: none; 禁止所有的默认事件，就好使了
从 chrome56 开始，在 window、document 和 body 上注册的 touchstart 和 touchmove 事件处理函数，会默认为是 passive: true。浏览器忽略 preventDefault() 就可以第一时间滚动了。如果在以上这 3 个元素的 touchstart 和 touchmove 事件处理函数中调用 e.preventDefault() ，会被浏览器忽略掉，并不会阻止默认行为。*/
	   blockquote, body, button, dd, dl, dt, fieldset, form, h1, h2, h3, h4, h5, h6, hr, input, legend, li, ol, p, pre, td, textarea, th, ul,img{
		margin: 0;
		padding: 0;
		}
	   #container  img{
		   width: 100px;
	   }
	   body{background:black;overflow:hidden}
	   ul{list-style:none}
	   .clearfix:after{display: block; content: "\20"; height: 0; clear: both; overflow: hidden; visibility: hidden;}/*ie8����*/
     
	   .img-container li img{}
	   .img-container li {overflow:hidden;float:left;}
	   .large{width:100%;height:100%;position:absolute;top:0px;left:0px;background-color:black}
	</style>
  <body>
	<ul class="img-container clearfix" id="container">

	</ul>
	<div class="large animated fadeInDown" id="large_container" style="display:none">
		<img id="large_img">
	</div>
	<script src="zepto.min.js"></script>
	<!--总结zepto和jQuery是一样的使用方法但是在zepto中使用的tap事件仍然具有点透并且在我们所知道的使用上下左右滑动的时候必须要使用touch.js因为zepto堆swipe的封装是不会生效的-->
	<script>
		var countRight=0;
        var countLeft=0;
	var total = 17;
	var zWin = $(window);
	var render = function(){
		var tmpl = '';
		var padding = 2;
		var scrollBarWidth = 0;
		var winWidth = $(window).width();
		var picWidth = Math.floor((winWidth-padding*3-scrollBarWidth)/4);
		for(var i=1;i<=total;i++){
			var p = padding;
			if(i%4==1){
//			    每次第一列的物体没有边界
				p = 0;
			}
			tmpl+='<li data-id="'+i+'" class="animated bounceIn" style="width:'+picWidth+'px;height:'+picWidth+'px;padding-left:'+p+'px;padding-top:'+padding+'px;"><img src="img/'+i+'.jpg"></li>';
//			很长的字符串拼接加入img标签
		}
		$('#container').html(tmpl);
	}
	render();
	var cid;
	var wImage = $('#large_img');
//	大图
	var domImage = wImage[0];

	var loadImg = function(id,callback){
		$('#container').css({height:zWin.height(),'overflow':'hidden'});
//		container的高度是window的高度防止
		$('#large_container').css({
			width:zWin.width(),
			height:zWin.height()
			//top:$(window).scrollTop()
		}).show();
		var imgsrc = 'img/'+id+'.large.jpg';
		var ImageObj = new Image();

		ImageObj.onload = function(){
			var w = this.width;
			var h = this.height;
			var winWidth = zWin.width();
			var winHeight = zWin.height();
		    var realw = parseInt((winWidth - winHeight*w/h)/2);
			var realh = parseInt((winHeight - winWidth*h/w)/2);

			wImage.css('width','auto').css('height','auto');
			wImage.css('padding-left','0px').css('padding-top','0px');
			if(h/w>1.2){
//			    设置这是一个高度大于宽度所以左右padding
				 wImage.attr('src',imgsrc).css('height',winHeight).css('padding-left',realw+'px');
			}else{
//			    这是一个宽度大于高度的所以设置高度上下有padding
				 wImage.attr('src',imgsrc).css('width',winWidth).css('padding-top',realh+'px');
			}
			
			callback&&callback();
		}

        ImageObj.src = imgsrc;
	}
function self(){
        wImage.removeClass('animated bounceInLeft');

        lock = false;
    }
	$('#container').delegate('li','tap',function(){
		var _id = cid = $(this).attr('data-id');
//		this是被操作的元素不是	$('#container')
		loadImg(_id);
//        document.addEventListener('touchmove',function(event) {
//            event.preventDefault();
//        },false);
//		在火狐里面去掉这个代码也可以？因为touchmove有一个200ms的规定时间如果超过了时间并没有得到回应浏览器就会有一个默认的行为让touchmove不必执行所以我们需要去掉文档的默认行为但是在谷歌里面不识别e.preventDefault();事件所以就要用css属性 touch-action: none;
	});
    function  my(){
        wImage.removeClass('animated bounceInRight');

        lock = false;
    }
	$('#large_container').tap(function(){
		$('#container').css({height:'auto','overflow':'auto'});
		$('#large_container').hide();
	});
	$('#large_container').mousedown(function(e){
		e.preventDefault();
	});
	       var lock = false;
//	没有被锁定
	$('#large_container').swipeLeft(function(){
        console.log("左");
		if(lock){
		    console.log(lock);
			return;
		    }
		cid++;
		console.log("我是自己加"+cid);
        if(cid>17)
        {

            cid=17;
            countRight=1;
//            lock = false;

        }
//		lock =true;
//		控制照片不可以在切换
		   if(cid<=17){
            lock = false;
		    if(countRight==0) {
                console.log("我是一个大于17");
                loadImg(cid, function () {
                    domImage.addEventListener('webkitAnimationEnd', function () {
                        wImage.removeClass('animated bounceInRight');
                        domImage.removeEventListener('webkitAnimationEnd', my);
//				因为在划过来的时候已经添加了这个动画样式但是连着滑动两张就会发现最后一张出现不存在所以在动画结束之后移除这个样式在重新加入这个样式这样就可以发现连着滑动也会执行webkitAnimationEnd判断动画结束的事件

                    }, false);
                    wImage.addClass('animated bounceInRight');
                });
            }
		   }
      console.log(cid)

	});

	$('#large_container').swipeRight(function() {
        console.log(cid);
        console.log("右");
        if (lock) {
            return;
        }
        cid--;
        console.log("我是自己的右面自己减" + cid);
//        lock = true;
//        if (cid > 0) {
//            loadImg(cid, function () {
//
//                domImage.addEventListener('webkitAnimationEnd', function () {
//                    wImage.removeClass('animated bounceInLeft');
//                    domImage.removeEventListener('webkitAnimationEnd', self);
////					踩坑记关于移除事件千万要写参数啊大佬
//                    lock = false;
//                }, false);
//                wImage.addClass('animated bounceInLeft');
//            });
//
//
//        }
        if(cid>0){

            lock = false;
            if(  countLeft==0) {
                console.log("我是一个大于0"+cid);
//                loadImg(cid, function () {
//                    domImage.addEventListener('webkitAnimationEnd', function () {
//                        wImage.removeClass('animated bounceInRight');
//                        domImage.removeEventListener('webkitAnimationEnd', my);
////				因为在划过来的时候已经添加了这个动画样式但是连着滑动两张就会发现最后一张出现不存在所以在动画结束之后移除这个样式在重新加入这个样式这样就可以发现连着滑动也会执行webkitAnimationEnd判断动画结束的事件
//
//                    }, false);
//                    wImage.addClass('animated bounceInRight');
//                });
                loadImg(cid, function () {
//左滑右滑动为什么不识别有的时候可以去执行左就只能一直执行左边但是突然间右边就不好使了
                    domImage.addEventListener('webkitAnimationEnd', function () {
                        wImage.removeClass('animated bounceInLeft');
                        domImage.removeEventListener('webkitAnimationEnd', self);
//					踩坑记关于移除事件千万要写参数啊大佬

                    }, false);
                    wImage.addClass('animated bounceInLeft');
                });
            }
        }
		if(cid==0){
            countLeft=1;
			cid = 1;
		}
	});
	/*为什么在谷歌里面就不好使左滑右滑动难道说安卓是基于谷歌但是在火狐里面就好使*/
	</script>
  </body>
</html>